# TO USE THIS CONTROL FILE:
# - create a separate JO for your process, e.g. mc.MGPy8_ttll_SMEFTsim_reweighted.py
# - declare "selected_operators", a list of SMEFTsim operators that is a subset of the keys of the "eft_dict" below
# - declare "process_definition", a string that will be appended to "process" below and MUST contain at least the relevant MG generate command
# - declare "safety_factor", a float as a scale factor to determine the actual number of events to generate. Without any filter, safety_factor = 1.1 is a good choice. With an event filter, set safety_factor to at least 1/filter_efficiency
# - declare "fixed_scale", a float to fix muR=muF (because MG doesn't run the WCs). Recommended: = sum(masses)_{final state particles}
# - declare "gridpack", a bool indicating whether generation (and possibly reweighting) is to be run from a gridpack
# - declare "evgenConfig.description", a sufficiently descriptive string for the sample metadata,
#                                      e.g. 'SMEFTsim 3.0 tt+ll, top model, inclusive, reweighted, EFT vertices, no propagator correction'
# - include this file, using the appropriate relative path

from MadGraphControl.MadGraphUtils import *
from MCJobOptionUtils.JOsupport import get_physics_short

import shutil

# general parameters
nevents     = runArgs.maxEvents if runArgs.maxEvents>0 else evgenConfig.nEventsPerJob
nevents    *= safety_factor
mllcut      = 5
lhe_version = 3

# process definition
model = "SMEFTsim_topU3l_MwScheme_UFO-massless"
if "_prop" in get_physics_short():
    model = "SMEFTsim_topU3l_MwScheme_PropCorr_UFO-massless"

process = '''
import model ''' + model + '''
define p = g u c d s b u~ c~ d~ s~ b~
define j = g u c d s b u~ c~ d~ s~ b~
define w = w+ w-
define l+ = e+ mu+ ta+
define l- = e- mu- ta-
define wdec = l+ l- vl vl~ j
''' + process_definition + '''
output -f
'''
process_dir = new_process(process)

# run card settings
settings = {
    'nevents'               : nevents,
    'maxjetflavor'          : 5,
    'pdlabel'               : 'lhapdf',
    'lhaid'                 : 262000,
    'use_syst'              : 'False',
    'ptj'                   : '0.0',
    'ptl'                   : '0.0',
    'etaj'                  : '-1.0',
    'etal'                  : '-1.0',
    'drjj'                  : '0.0',
    'drll'                  : '0.0',
    'drjl'                  : '0.0',
    'mmll'                  : mllcut,
    'dynamical_scale_choice': '0',
    'fixed_ren_scale'       : 'True',
    'fixed_fac_scale'       : 'True',
    'scale'                 : fixed_scale,
    'dsqrt_q2fact1'         : fixed_scale,
    'dsqrt_q2fact2'         : fixed_scale,
}

modify_run_card(process_dir=process_dir,
                runArgs=runArgs,
                settings=settings)

# param card settings
# First copy the "restricted" parameter card param_card_massless.dat provided in the SMEFTsim model UFO, so all Wilson coefficients are set to 0.
mg_model_dir="/cvmfs/atlas.cern.ch/repo/sw/Generators/madgraph/models/latest"
model_name = model.replace("-massless","")
card_name = os.path.join(mg_model_dir, model_name, "param_card_massless.dat")
shutil.copyfile(card_name, os.path.join(process_dir,"Cards/param_card.dat"))

# SM param card settings
params = dict()
params['mass'] = dict()
params['mass']['6'] = '1.725000e+02'
params['mass']['23'] = '9.118760e+01'
params['mass']['24'] = '8.039900e+01'
params['mass']['25'] = '1.250000e+02'
params['yukawa'] = dict()
params['yukawa']['6'] = '1.725000e+02'
params['DECAY'] = dict()
params['DECAY']['23'] = 'DECAY  23   2.495200e+00'
params['DECAY']['24'] = '''DECAY  24   2.085000e+00
   3.377000e-01   2   -1   2
   3.377000e-01   2   -3   4
   1.082000e-01   2  -11  12
   1.082000e-01   2  -13  14
   1.082000e-01   2  -15  16'''
params['DECAY']['25'] = 'DECAY  25   6.382339e-03'

modify_param_card(process_dir=process_dir,params=params)

# EFT param card settings
params = dict() 
params['SMEFTcutoff'] = dict()
params['SMEFTcutoff']['1'] = '1.000000e+03'
modify_param_card(process_dir=process_dir,params=params)

TEMPLATE_INSERT_EFT_DICT

# convert operator values to text format
def value_to_string(value):
    if value > 0:
        string = "p"
    else:
        string = "m"
    string += "{:.1f}".format(abs(value)).replace(".","p")
    return string

# define reweighting points
reweight_commands = "change rwgt_dir rwgt\n"
reweight_commands += "change helicity False\n"
for operator in selected_operators:
    block = eft_dict[operator][0]
    idnumber = eft_dict[operator][1]
    for value in eft_dict[operator][2]:
        reweight_commands += "launch --rwgt_info=" + operator + "_" + value_to_string(value) + "\n"
        reweight_commands += "set "+ block + " " +str(idnumber) + " " + str(value) + "\n"
for i,operator1 in enumerate(selected_operators):
    block1, idnumber1, valrange1 = eft_dict[operator1]
    for operator2 in selected_operators[i+1:]:
        block2, idnumber2, valrange2 = eft_dict[operator2]
        # avoid going beyond 1000 weights if possible
        if len(selected_operators) <= 30:
            for index_v in [1, -2]: # the middle two in the value list
                value1 = valrange1[index_v]
                value2 = valrange2[index_v]
                reweight_commands += "launch --rwgt_info=" + operator1 + "_" + value_to_string(value1) + "_" + operator2 + "_" + value_to_string(value2) + "\n"
                reweight_commands += "set "+ block1 + " " + str(idnumber1) + " " + str(value1) + "\n"
                reweight_commands += "set "+ block2 + " " + str(idnumber2) + " " + str(value2) + "\n"
        else:
            value1 = valrange1[1]
            value2 = valrange2[-2]
            reweight_commands += "launch --rwgt_info=" + operator1 + "_" + value_to_string(value1) + "_" + operator2 + "_" + value_to_string(value2) + "\n"
            reweight_commands += "set "+ block1 + " " + str(idnumber1) + " " + str(value1) + "\n"
            reweight_commands += "set "+ block2 + " " + str(idnumber2) + " " + str(value2) + "\n"

# write to reweight card
reweight_card   = process_dir+'/Cards/reweight_card.dat'
reweight_card_f = open(reweight_card,'w')
reweight_card_f.write(reweight_commands)
reweight_card_f.close()

print_cards()

generate(process_dir=process_dir,
         grid_pack=gridpack,
         gridpack_compile=False,
         required_accuracy=0.001,
         runArgs=runArgs)

outputDS = arrange_output(process_dir=process_dir,
                          runArgs=runArgs,
                          saveProcDir=True,
                          lhe_version=lhe_version)

evgenConfig.contact          = ['zhengcheng.tao@cern.ch']
evgenConfig.generators       = ['MadGraph','EvtGen','Pythia8']

check_reset_proc_number(opts)
include("Pythia8_i/Pythia8_A14_NNPDF23LO_EvtGen_Common.py")
include("Pythia8_i/Pythia8_MadGraph.py")
